#!/usr/bin/env python3

import scanner
import requests
from urllib.parse import urljoin

ascii_art = ('''
    __        ____     ______  
    \ \      / /\ \   / / ___| 
     \ \ /\ / /  \ \ / /\___ \ 
      \ V  V /    \ V /  ___) |
       \_/\_/      \_/  |____/ 
[This tool is intended for ethical purposes only]
                                    By 420Project
''')
red = "\033[91m"
green = "\033[92m"
yellow = "\033[93m"
end_color = "\033[0m"
warn = "[***]"
warning = f"{red}{warn}{end_color}"
ri = "[Risk Report]"
risk = f"{yellow}{ri}{end_color}"
sugg = "[Suggestions]"
suggestion = f"{green}{sugg}{end_color}"
colored_ascii_art = f"{green}{ascii_art.replace(end_color, end_color + red)}{end_color}"


def perform_brute_force(target_url, brute_url, passlist_path):
    data_Brute = {"username": "admin", "password": "", "Login": "submit"}

    with open(passlist_path, "r") as wordlist_file:
        for line in wordlist_file:
            word = line.strip()
            data_Brute["password"] = word
            response = requests.post(brute_url, data=data_Brute)

            if "login failed" not in response.text.lower():
                print(warning + " Password of login user admin is too weak")
                print("Exposed in simple brute force attack, password --> " + word)
                print(
                    risk + " Attackers can repeatedly attempt authentication, potentially leading to unauthorized access. ")
                print("Brute force attacks pose a significant security risk.")
                print("It can result in compromised user accounts, data breaches, and system instability.")
                print(suggestion + """\n[0] Account Lockout Policies:
Implement account lockout policies to temporarily lock user accounts after a certain number of failed login attempts. This helps mitigate brute force attacks.

[1] CAPTCHA or CAPTCHA-like Mechanisms:
Introduce CAPTCHA or CAPTCHA-like mechanisms to differentiate between human and automated login attempts, making automated brute force attacks more challenging.

[2] Strong Password Policies:
Enforce strong password policies, encouraging users to create complex passwords that are resistant to brute force attacks.

[3] Rate Limiting:
Implement rate-limiting mechanisms to restrict the number of login attempts within a specific time period, preventing rapid-fire attacks.

[4] Monitoring and Logging:
Implement comprehensive monitoring and logging for login activities. Detect and respond to suspicious patterns, such as multiple failed login attempts from a single IP address.\n""")
                return True, word
    return False, None


def main():
    print(colored_ascii_art)
    target_url = input("Input target URL(base_url): ")

    links_to_ignore = urljoin(target_url, "logout.php")
    vul_scanner = scanner.Scanner(target_url, links_to_ignore)

    brute_url = urljoin(target_url, "login.php")
    passlist_path = "/root/Desktop/WVtester/passlist.txt"

    test_brute_force_login, successful_password = perform_brute_force(target_url, brute_url, passlist_path)

    if test_brute_force_login:
        data_Dict = {"username": "admin", "password": successful_password, "Login": "submit"}
        vul_scanner.session.post(brute_url, data=data_Dict)
        print("Nmap Scan:")
        vul_scanner.get_nmap('-F', target_url)
        vul_scanner.crawl()
        vul_scanner.run_scanner()
    else:
        print("[+] Not found any common password in login")
        passw = input("[-] Enter password for user admin: ")
        data_Dict = {"username": "admin", "password": passw, "Login": "submit"}
        vul_scanner.session.post(brute_url, data=data_Dict)
        print("Nmap Scan:")
        vul_scanner.get_nmap('-F', target_url)
        vul_scanner.crawl()
        vul_scanner.run_scanner()


if __name__ == "__main__":
    main()
